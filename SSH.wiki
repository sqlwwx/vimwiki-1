 = [[index|Top]] [[Study]] [[Writing]] [[diary/diary|Diary]] [[Bai Xuesong|About]] =
 ==== Hi, Welcome to [[Bai Xuesong]]'s wiki. ====

=== Books and Documents  ===
 * [[https://www.michaelwlucas.com/nonfiction/ssh-mastery|SSH Mastery: OpenSSH, PuTTY, Tunnels and Keys]]  ^_*Excellent!! Highly recommend!!_*^
   # *Chapter 1: Introducing OpenSSH*
     - created in 1995 for secure communication across private, public, and hostile networks.
     - openSSH is developed by the openBSD project. openSSH is available under BSD-style license and comes in two versions: openBSD and Portable openSSH.
     - SSH protocol comes in two version, SSH-1 and SSH-2. SSH-1 is vulnerable to attacks.
       </br>*Do not use SSH version 1!!!*
       # Intruder can hijack the connection and insert arbitrary text into SSH-1 session.
       # SSH-1 session can be decoded in real time by programs such as [[http://ettercap.github.io/ettercap/|Ettercap]].
   # *Chapter 2: Encryption, Algorithms, and Keys*
     - *Encryption algorithms*
       # *Symmetric algorithm*
         - same key for encryption and decryption.
         - AES, 3DES, blowfish, IDEA etc.
         - very fast and secure.
       # *Asymmetric algorithm*
         - separate key pair(public/private). public key encryption public key encryption.
         - Diffie-Hellman key exchange protocol.
         - much slower and more cumputationally expensive than symmetric algorithm.
     - *How SSH uses Encyption*
       # Negotiate a temporary keypair of session by keypair of server.
       # Derive a temporary symmetric key of session.
       # Encrypt data by the temporary symmetric key.
       # Change two temporary keypairs intermittently.
   # *Chapter 3: The OpenSSH Server*
     - *Configration files*
       # Server: `/etc/ssh/sshd_config`
       # Server's private keys: `/etc/ssh/ssh_host_*_key` (* = encryption algorithms such as rsa, dsa, ecdsa ...)
       # Server's public keys: `/etc/ssh/ssh_host_*_key.pub` (* = encryption algorithms such as rsa, dsa, ecdsa ...)
       # Client: `/etc/ssh/ssh_config`
     - *sshd_config*
       {{{
ListenAddress ip:port
Protocol 2                          #Do not use SSH version 1.
Banner /etc/ssh/ssh-banner          #It won't always appear. SSH protocol do not guarantee.
PrintMotd yes                       #Print message of the day ==> /etc/motd. reference PAM.
PrintLastLog yes                    #Print the information of the user's last login.
LoginGraceTime 2m                   #User can try to log in 6 times in 2 minutes in a single session.
MaxAuthTries 6
UseDNS yes                          #Verify the forward and reverse DNS names for a client's IP address.
                                    #The check can increase system load and failed DNS checks wil1 slow down all SSH logins.
PidFile /var/run/sshd.pid
SyslogFacility AUTH
LogLevel INFO                       #Accepted Values: QUIET/FATAL/ERROR/INFO/VERBOSE/DEBUG[123]
DenyUsers   denyuserlist            #PRIority Level 01 (High)
AllowUsers  allowuserlist           #PRIority Level 02
DenyGroups  denygrouplist           #PRIority Level 03
AllowGroups allowgrouplist          #PRIority Level 04 (Low)
#AllowUsers backup@10.0.0.0/8       #Allow only user from 10.0.0.0/8 network.
       }}}
     - *Wildcards*
       # ? matches exactly on character
       # * matches zero or more characters
         </br>`HOST !*.dns02.cgeeker.com *.dns01.cgeeker.com #Multiple HOSTs separated with a space.`
     - *Matches*
       # Users and Groups
         </br>`Match User bxs,byz,wn #Multiple USERs separated with a comma.`
       # Address and HOST
         </br>`Match Address 192.0.2.0/26, 192.0.2.192/26 #Multiple IPs separated with a comma.`
         </br>`Match HOST *.dns01.cgeeker.com *.dns02.cgeeker.com #Multiple HOSTs separated with a space.`
       # Multiple Mix Match Conditions
         </br>`Match HOST *.dns01.cgeeker.com User byz #Multiple Match Conditions separated with a space.`
     - *Do not allow users to SSH into the system as root*
     - *Chrooting Users*
       </br>[[http://olivier.sessink.nl/jailkit/|jailkit]] _*can easily populate a chroot.*_
       # Set permissions on the chroot directory (owned by root and not be writable by the restricted user)
       # Create home directory for the imprisoned user
       # Create device node file(/dev/{urandom,null,stderr,stdin,stdout,tty,zero})
       # Copy shell and other programs(static version or dynamic version + necessary libraries)
       # ChrootDirecotry Macros: %% -> %, %h -> user"s home directory, %u -> user's username.
   # *Chapter 4: Verifying Server Keys*
     - *Key Fingerprints*
       </br>`ssh-keygen -lvf /etc/ssh/ssh_host_rsa_key.pub #text + randomart(ascii art) fingerprints`
   # *Chapter 5: SSH Clients*
     - *ssh_config or ~/.ssh/config*
       {{{
AddressFamily inet                      #IPV4 only, Accepted Values: inet/inet6/any
BindAddress 54.249.98.77                #bind to specific interface
ControlMaster auto                      #Multiplexing Connections
ControlPath ~/.ssh/sockets/%r@%h:%p     #Specify the path to the control socket used for connection sharing
StrictHostKeyChecking ask               #Accepted Values: yes/no/ask
HashKnownHosts yes                      #Hashing known_hosts
       }}}
     - *The Host Key Cache:* `~/.ssh/known_hosts`
   # *Chapter 6: Copying Files over SSH*
     - *scp*
       </br>`scp source-hostname:filename destination-hostname:filename`
     - *sftp*
       {{{
Subsystem sftp /usr/libexec/sftp-server
Match Group sftponly                    #sftp only group
ChrootDirectory %h                      #chroot
ForceCommand internal-sftp
AllowTcpForwarding no
       }}}
   # *Chapter 7: SSH Keys*
     - *Passphrase*
       # A passphrase at least several words long.
       # [[http://www.diceware.com|diceware]] can generate a good passphrase.
     - *Hail Mary Cloud*
       </br>scan the whole internet for SSH Server.
     - *SSH Agent*
       # cache private key.
       # do not guarantee security.
     - *Disabling Password*
       {{{
ChallengeResponseAuthentication no
PasswordAuthentication no
PubkeyAuthentication yes
       }}}
     - *Agent Forwarding*
       </br>forward authentication back to client.
       # eval `ssh-agent
       ` #execute ssh-agent and export environment variables
       # `echo $SSH_AUTH_SOCK #SSH_AGENT_PID`
       #  
         {{{
AllowAgentForwarding yes # sshd_config
         }}}
       #  
         {{{
ForwardAgent yes #ssh_config
         }}}
   # *Chapter 8: X11 Forwarding*
       #  
         {{{
X11Forwarding yes # sshd_config
         }}}
       #  
         {{{
ForwardX11 yes        #ssh_config
ForwardX11Trusted yes #ssh_config
         }}}
   # *Chapter 9: Port Forwarding*
       # *Local Port Forwarding*
         </br>redirects client port to server port
       # *Remote Port Forwarding*
         </br>redirects server port to client port
       # *Dynamic Port Forwarding*
         </br>ssh act as SOCKS proxy on the client, redirects all client traffic to server
       # *Privileged Prots*
         </br>On Unix-like systems, Only root can bind TCP ports below 1024(reserved for system use).
       # *Restricting Port Forwarding*
         {{{
AllowTcpForwarding yes        #sshd_config, default: yes
GatewayPorts       yes        #sshd_config, default: no
PermitOpen localhost:25       #sshd_config
         }}}
   # *Chapter 10: Keeping SSH Connections Open*
       # *TCP KeepAlive*
         {{{
TCPKeepAlive yes # sshd_config & ssh_config
         }}}
       # *SSH KeepAlive*
         {{{
#server side sshd_config
ClientAliveInterval 90 #how many seconds the connection needs to be idle before the host sends a keepalive request.
ClientAliveCountMax 5  #how many keepalives it needs to send without receiving a response
         }}}
         {{{
#client side ssh_config
ServerAliveInterval 90 #how many seconds the connection needs to be idle before the host sends a keepalive request.
ServerAliveCountMax 5  #how many keepalives it needs to send without receiving a response
         }}}

=== Examples ===
 # `telnet/nc hostname port #OpenSSH Banner Grabbing`
 # `sshd -f sshd_config -p testport -ddd #Test and Debug mode(not fork)`
 # `ssh-keyscan -t rsa hostname -p sshport #Get server's rsa public key`
 # `ssh -F ssh_config -vvv hostname -p port #Connect to host in verbose mode`
 # `ssh -l user hostname #Connect to host with user, default user is local user`
 # `ssh user@hostname #Connect to host with user, default user is local user`
 # `ssh -o Port=2222 hostname #Connect tohostname with 2222 port(command line options)`
 # `ssh-keygen -H #hashing ~/.ssh/known_hosts`
 # `scp -rp dir hostname: #recursively copy a directory`
 # `ssh-keygen -A #genarate all missing key`
 # `ssh-keygen -t ecdsa -f filename -N '' #genarate ecdsa keypair without passphrase`
 # `cat .ssh/id_rsa.pub | ssh server "cat >> ~/.ssh/authorized_keys" #send user public key to server`
 # `ssh -X hostname #connect hostnmae by X11`
 # `ssh -f hostname xterm #run xterm on the host and client got to background`
 # `ssh -fNL localport:remotehost:remotename #run Local Port Forwarding and client got to background`

